{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Website\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check for existing authentication on mount\n  useEffect(() => {\n    const checkAuth = () => {\n      const token = localStorage.getItem('authToken');\n      const userData = localStorage.getItem('userData');\n      if (token && userData) {\n        try {\n          const parsedUser = JSON.parse(userData);\n          setUser(parsedUser);\n          setIsAuthenticated(true);\n        } catch (error) {\n          console.error('Error parsing user data:', error);\n          localStorage.removeItem('authToken');\n          localStorage.removeItem('userData');\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n\n  // Simple login function (you can replace this with API call)\n  const login = async (username, password) => {\n    try {\n      setLoading(true);\n\n      // For now, simple hardcoded authentication\n      // Replace this with your actual API call\n      if (username === 'admin' && password === 'password123') {\n        const userData = {\n          id: 1,\n          username: 'admin',\n          name: 'Administrator',\n          email: 'admin@example.com'\n        };\n        const token = 'simple-auth-token-' + Date.now();\n\n        // Store in localStorage\n        localStorage.setItem('authToken', token);\n        localStorage.setItem('userData', JSON.stringify(userData));\n        setUser(userData);\n        setIsAuthenticated(true);\n        setLoading(false);\n        return {\n          success: true\n        };\n      } else {\n        setLoading(false);\n        return {\n          success: false,\n          error: 'Invalid username or password'\n        };\n      }\n    } catch (error) {\n      setLoading(false);\n      return {\n        success: false,\n        error: 'Login failed. Please try again.'\n      };\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userData');\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Check if user has specific role/permission (for future use)\n  const hasPermission = permission => {\n    if (!isAuthenticated || !user) return false;\n    // Add your permission logic here\n    return true; // For now, authenticated users have all permissions\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    logout,\n    hasPermission\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"mKb+zX9grAar2iMVStuBBwt7fpw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","checkAuth","token","localStorage","getItem","userData","parsedUser","JSON","parse","error","console","removeItem","login","username","password","id","name","email","Date","now","setItem","stringify","success","logout","hasPermission","permission","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Code/Website/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check for existing authentication on mount\n  useEffect(() => {\n    const checkAuth = () => {\n      const token = localStorage.getItem('authToken');\n      const userData = localStorage.getItem('userData');\n      \n      if (token && userData) {\n        try {\n          const parsedUser = JSON.parse(userData);\n          setUser(parsedUser);\n          setIsAuthenticated(true);\n        } catch (error) {\n          console.error('Error parsing user data:', error);\n          localStorage.removeItem('authToken');\n          localStorage.removeItem('userData');\n        }\n      }\n      \n      setLoading(false);\n    };\n\n    checkAuth();\n  }, []);\n\n  // Simple login function (you can replace this with API call)\n  const login = async (username, password) => {\n    try {\n      setLoading(true);\n      \n      // For now, simple hardcoded authentication\n      // Replace this with your actual API call\n      if (username === 'admin' && password === 'password123') {\n        const userData = {\n          id: 1,\n          username: 'admin',\n          name: 'Administrator',\n          email: 'admin@example.com'\n        };\n        \n        const token = 'simple-auth-token-' + Date.now();\n        \n        // Store in localStorage\n        localStorage.setItem('authToken', token);\n        localStorage.setItem('userData', JSON.stringify(userData));\n        \n        setUser(userData);\n        setIsAuthenticated(true);\n        setLoading(false);\n        \n        return { success: true };\n      } else {\n        setLoading(false);\n        return { success: false, error: 'Invalid username or password' };\n      }\n    } catch (error) {\n      setLoading(false);\n      return { success: false, error: 'Login failed. Please try again.' };\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userData');\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Check if user has specific role/permission (for future use)\n  const hasPermission = (permission) => {\n    if (!isAuthenticated || !user) return false;\n    // Add your permission logic here\n    return true; // For now, authenticated users have all permissions\n  };\n\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    logout,\n    hasPermission\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}