{"ast":null,"code":"import blogData from '../data/blogPosts.json';\nclass BlogService {\n  constructor() {\n    this.posts = blogData.posts;\n    this.categories = blogData.categories;\n  }\n\n  // Get all blog posts\n  getAllPosts() {\n    return this.posts.sort((a, b) => new Date(b.date) - new Date(a.date));\n  }\n\n  // Get a single post by ID\n  getPostById(id) {\n    return this.posts.find(post => post.id === parseInt(id));\n  }\n\n  // Get posts by category\n  getPostsByCategory(category) {\n    if (category === 'All') {\n      return this.getAllPosts();\n    }\n    return this.posts.filter(post => post.category === category).sort((a, b) => new Date(b.date) - new Date(a.date));\n  }\n\n  // Get all categories\n  getCategories() {\n    return this.categories;\n  }\n\n  // Get posts by tag\n  getPostsByTag(tag) {\n    return this.posts.filter(post => post.tags && post.tags.includes(tag)).sort((a, b) => new Date(b.date) - new Date(a.date));\n  }\n\n  // Search posts by title or content\n  searchPosts(query) {\n    const searchTerm = query.toLowerCase();\n    return this.posts.filter(post => post.title.toLowerCase().includes(searchTerm) || post.excerpt.toLowerCase().includes(searchTerm) || post.content.toLowerCase().includes(searchTerm) || post.tags.some(tag => tag.toLowerCase().includes(searchTerm))).sort((a, b) => new Date(b.date) - new Date(a.date));\n  }\n\n  // Get recent posts (limit)\n  getRecentPosts(limit = 3) {\n    return this.getAllPosts().slice(0, limit);\n  }\n\n  // Get related posts (by category, excluding current post)\n  getRelatedPosts(postId, limit = 3) {\n    const currentPost = this.getPostById(postId);\n    if (!currentPost) return [];\n    return this.posts.filter(post => post.id !== postId && post.category === currentPost.category).sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, limit);\n  }\n\n  // Add a new post (for future use with admin panel)\n  addPost(post) {\n    const newPost = {\n      ...post,\n      id: Math.max(...this.posts.map(p => p.id)) + 1,\n      date: new Date().toISOString().split('T')[0]\n    };\n    this.posts.unshift(newPost);\n    return newPost;\n  }\n\n  // Update a post (for future use with admin panel)\n  updatePost(id, updatedPost) {\n    const index = this.posts.findIndex(post => post.id === parseInt(id));\n    if (index !== -1) {\n      this.posts[index] = {\n        ...this.posts[index],\n        ...updatedPost\n      };\n      return this.posts[index];\n    }\n    return null;\n  }\n\n  // Delete a post (for future use with admin panel)\n  deletePost(id) {\n    const index = this.posts.findIndex(post => post.id === parseInt(id));\n    if (index !== -1) {\n      return this.posts.splice(index, 1)[0];\n    }\n    return null;\n  }\n}\n\n// Create a singleton instance\nconst blogService = new BlogService();\nexport default blogService;","map":{"version":3,"names":["blogData","BlogService","constructor","posts","categories","getAllPosts","sort","a","b","Date","date","getPostById","id","find","post","parseInt","getPostsByCategory","category","filter","getCategories","getPostsByTag","tag","tags","includes","searchPosts","query","searchTerm","toLowerCase","title","excerpt","content","some","getRecentPosts","limit","slice","getRelatedPosts","postId","currentPost","addPost","newPost","Math","max","map","p","toISOString","split","unshift","updatePost","updatedPost","index","findIndex","deletePost","splice","blogService"],"sources":["C:/Code/Website/src/services/blogService.js"],"sourcesContent":["import blogData from '../data/blogPosts.json';\n\nclass BlogService {\n  constructor() {\n    this.posts = blogData.posts;\n    this.categories = blogData.categories;\n  }\n\n  // Get all blog posts\n  getAllPosts() {\n    return this.posts.sort((a, b) => new Date(b.date) - new Date(a.date));\n  }\n\n  // Get a single post by ID\n  getPostById(id) {\n    return this.posts.find(post => post.id === parseInt(id));\n  }\n\n  // Get posts by category\n  getPostsByCategory(category) {\n    if (category === 'All') {\n      return this.getAllPosts();\n    }\n    return this.posts\n      .filter(post => post.category === category)\n      .sort((a, b) => new Date(b.date) - new Date(a.date));\n  }\n\n  // Get all categories\n  getCategories() {\n    return this.categories;\n  }\n\n  // Get posts by tag\n  getPostsByTag(tag) {\n    return this.posts\n      .filter(post => post.tags && post.tags.includes(tag))\n      .sort((a, b) => new Date(b.date) - new Date(a.date));\n  }\n\n  // Search posts by title or content\n  searchPosts(query) {\n    const searchTerm = query.toLowerCase();\n    return this.posts\n      .filter(post => \n        post.title.toLowerCase().includes(searchTerm) ||\n        post.excerpt.toLowerCase().includes(searchTerm) ||\n        post.content.toLowerCase().includes(searchTerm) ||\n        post.tags.some(tag => tag.toLowerCase().includes(searchTerm))\n      )\n      .sort((a, b) => new Date(b.date) - new Date(a.date));\n  }\n\n  // Get recent posts (limit)\n  getRecentPosts(limit = 3) {\n    return this.getAllPosts().slice(0, limit);\n  }\n\n  // Get related posts (by category, excluding current post)\n  getRelatedPosts(postId, limit = 3) {\n    const currentPost = this.getPostById(postId);\n    if (!currentPost) return [];\n\n    return this.posts\n      .filter(post => \n        post.id !== postId && \n        post.category === currentPost.category\n      )\n      .sort((a, b) => new Date(b.date) - new Date(a.date))\n      .slice(0, limit);\n  }\n\n  // Add a new post (for future use with admin panel)\n  addPost(post) {\n    const newPost = {\n      ...post,\n      id: Math.max(...this.posts.map(p => p.id)) + 1,\n      date: new Date().toISOString().split('T')[0]\n    };\n    this.posts.unshift(newPost);\n    return newPost;\n  }\n\n  // Update a post (for future use with admin panel)\n  updatePost(id, updatedPost) {\n    const index = this.posts.findIndex(post => post.id === parseInt(id));\n    if (index !== -1) {\n      this.posts[index] = { ...this.posts[index], ...updatedPost };\n      return this.posts[index];\n    }\n    return null;\n  }\n\n  // Delete a post (for future use with admin panel)\n  deletePost(id) {\n    const index = this.posts.findIndex(post => post.id === parseInt(id));\n    if (index !== -1) {\n      return this.posts.splice(index, 1)[0];\n    }\n    return null;\n  }\n}\n\n// Create a singleton instance\nconst blogService = new BlogService();\n\nexport default blogService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}